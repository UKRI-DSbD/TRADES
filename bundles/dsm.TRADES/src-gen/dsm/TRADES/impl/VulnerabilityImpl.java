/**
 * Copyright Israel Aerospace Industries, Eclipse contributors and others 2021. All rights reserved.
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License 2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-2.0/
 * 
 * SPDX-License-Identifier: EPL-2.0
 * 
 * Contributors:
 *     ELTA Ltd - initial API and implementation
 * 
 */
package dsm.TRADES.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.emf.ecore.util.EObjectWithInverseResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;

import dsm.TRADES.ComponentType;
import dsm.TRADES.TRADESPackage;
import dsm.TRADES.Vulnerability;
import dsm.TRADES.VulnerabilityTypeENUM;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Vulnerability</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link dsm.TRADES.impl.VulnerabilityImpl#getManifests <em>Manifests</em>}</li>
 *   <li>{@link dsm.TRADES.impl.VulnerabilityImpl#getVulnerabilityType <em>Vulnerability Type</em>}</li>
 *   <li>{@link dsm.TRADES.impl.VulnerabilityImpl#getAffects <em>Affects</em>}</li>
 * </ul>
 *
 * @generated
 */
public class VulnerabilityImpl extends NamedElementImpl implements Vulnerability {
	/**
	 * The cached value of the '{@link #getManifests() <em>Manifests</em>}' reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getManifests()
	 * @generated
	 * @ordered
	 */
	protected EList<Vulnerability> manifests;

	/**
	 * The default value of the '{@link #getVulnerabilityType() <em>Vulnerability Type</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getVulnerabilityType()
	 * @generated
	 * @ordered
	 */
	protected static final VulnerabilityTypeENUM VULNERABILITY_TYPE_EDEFAULT = VulnerabilityTypeENUM.CWE;

	/**
	 * The cached value of the '{@link #getVulnerabilityType() <em>Vulnerability Type</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getVulnerabilityType()
	 * @generated
	 * @ordered
	 */
	protected VulnerabilityTypeENUM vulnerabilityType = VULNERABILITY_TYPE_EDEFAULT;

	/**
	 * The cached value of the '{@link #getAffects() <em>Affects</em>}' reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getAffects()
	 * @generated
	 * @ordered
	 */
	protected EList<ComponentType> affects;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VulnerabilityImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return TRADESPackage.Literals.VULNERABILITY;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EList<Vulnerability> getManifests() {
		if (manifests == null) {
			manifests = new EObjectResolvingEList<Vulnerability>(Vulnerability.class, this,
					TRADESPackage.VULNERABILITY__MANIFESTS);
		}
		return manifests;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EList<ComponentType> getAffects() {
		if (affects == null) {
			affects = new EObjectWithInverseResolvingEList.ManyInverse<ComponentType>(ComponentType.class, this,
					TRADESPackage.VULNERABILITY__AFFECTS, TRADESPackage.COMPONENT_TYPE__AFFECTED_BY);
		}
		return affects;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
		case TRADESPackage.VULNERABILITY__AFFECTS:
			return ((InternalEList<InternalEObject>) (InternalEList<?>) getAffects()).basicAdd(otherEnd, msgs);
		}
		return super.eInverseAdd(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
		case TRADESPackage.VULNERABILITY__AFFECTS:
			return ((InternalEList<?>) getAffects()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public VulnerabilityTypeENUM getVulnerabilityType() {
		return vulnerabilityType;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setVulnerabilityType(VulnerabilityTypeENUM newVulnerabilityType) {
		VulnerabilityTypeENUM oldVulnerabilityType = vulnerabilityType;
		vulnerabilityType = newVulnerabilityType == null ? VULNERABILITY_TYPE_EDEFAULT : newVulnerabilityType;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, TRADESPackage.VULNERABILITY__VULNERABILITY_TYPE,
					oldVulnerabilityType, vulnerabilityType));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
		case TRADESPackage.VULNERABILITY__MANIFESTS:
			return getManifests();
		case TRADESPackage.VULNERABILITY__VULNERABILITY_TYPE:
			return getVulnerabilityType();
		case TRADESPackage.VULNERABILITY__AFFECTS:
			return getAffects();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
		case TRADESPackage.VULNERABILITY__MANIFESTS:
			getManifests().clear();
			getManifests().addAll((Collection<? extends Vulnerability>) newValue);
			return;
		case TRADESPackage.VULNERABILITY__VULNERABILITY_TYPE:
			setVulnerabilityType((VulnerabilityTypeENUM) newValue);
			return;
		case TRADESPackage.VULNERABILITY__AFFECTS:
			getAffects().clear();
			getAffects().addAll((Collection<? extends ComponentType>) newValue);
			return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
		case TRADESPackage.VULNERABILITY__MANIFESTS:
			getManifests().clear();
			return;
		case TRADESPackage.VULNERABILITY__VULNERABILITY_TYPE:
			setVulnerabilityType(VULNERABILITY_TYPE_EDEFAULT);
			return;
		case TRADESPackage.VULNERABILITY__AFFECTS:
			getAffects().clear();
			return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
		case TRADESPackage.VULNERABILITY__MANIFESTS:
			return manifests != null && !manifests.isEmpty();
		case TRADESPackage.VULNERABILITY__VULNERABILITY_TYPE:
			return vulnerabilityType != VULNERABILITY_TYPE_EDEFAULT;
		case TRADESPackage.VULNERABILITY__AFFECTS:
			return affects != null && !affects.isEmpty();
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String toString() {
		if (eIsProxy())
			return super.toString();

		StringBuilder result = new StringBuilder(super.toString());
		result.append(" (vulnerabilityType: ");
		result.append(vulnerabilityType);
		result.append(')');
		return result.toString();
	}

} //VulnerabilityImpl
